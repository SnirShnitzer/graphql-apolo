version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: moonshot-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: moonshot_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - moonshot-network

  # Backend Service - Replica 1
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: moonshot-backend-1
    restart: always
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=moonshot_db
      - PORT=4000
      - NODE_ENV=production
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - moonshot-network

  # Backend Service - Replica 2
  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: moonshot-backend-2
    restart: always
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=moonshot_db
      - PORT=4000
      - NODE_ENV=production
      - LOG_LEVEL=info
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - moonshot-network

  # Load Balancer for Backend Services
  backend-lb:
    image: nginx:alpine
    container_name: moonshot-backend-lb
    restart: always
    ports:
      - "4000:4000"
    volumes:
      - ./nginx-backend.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend-1
      - backend-2
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - moonshot-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: moonshot-frontend
    restart: always
    environment:
      - REACT_APP_GRAPHQL_URL=/graphql
    ports:
      - "3000:3000"
    depends_on:
      - backend-lb
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - moonshot-network

volumes:
  postgres_data:
    name: moonshot-postgres-data

networks:
  moonshot-network:
    driver: bridge
    name: moonshot-network