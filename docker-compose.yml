version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: moonshot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: moonshot_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - moonshot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service (2 replicas for load balancing)
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: moonshot-backend-1
    restart: unless-stopped
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: moonshot_db
      PORT: 4000
      NODE_ENV: production
    ports:
      - "4001:4000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - moonshot-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: moonshot-backend-2
    restart: unless-stopped
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: password
      DATABASE_NAME: moonshot_db
      PORT: 4000
      NODE_ENV: production
    ports:
      - "4002:4000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - moonshot-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer (nginx)
  nginx:
    image: nginx:alpine
    container_name: moonshot-nginx
    restart: unless-stopped
    ports:
      - "4000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend-1
      - backend-2
    networks:
      - moonshot-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: moonshot-frontend
    restart: unless-stopped
    environment:
      REACT_APP_GRAPHQL_URL: http://localhost:4000/graphql
    ports:
      - "3000:3000"
    depends_on:
      - nginx
    networks:
      - moonshot-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: moonshot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - moonshot-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  moonshot-network:
    driver: bridge 